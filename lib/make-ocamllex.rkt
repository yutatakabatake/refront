#lang racket
(require "common.rkt")

(define make-open-parser
  (lambda (fout)
    (displayln "{\n\topen Parser\n}" fout)))

(define make-identifier
  (lambda (fout)
    (displayln "let id = ['a'-'z' '_'] ['a'-'z' '0'-'9' '_']*" fout)))


(define make-token
  (lambda (terminal-symbols fout)
    (let ((terminals (map (lambda (elem) (symbol->string elem)) terminal-symbols)))
      (display "rule token = parse\n" fout)
      (letrec ((loop
                (lambda (terminal-strings)
                  (cond
                    ; 最後にカッコ，識別子，空白，eofを書き足す
                    ((null? terminal-strings)
                     (displayln "\t| \"(\"\t{ LPARE }" fout)
                     (displayln "\t| \")\"\t{ RPARE }" fout)
                     (displayln (string-append "\t| id as str \t{ ID str }") fout)
                     (displayln "\t| [' ' '\\t' '\\n']\t{ token lexbuf }" fout)
                     (displayln "\t| eof\t{ EOF }" fout))
                    ;  数値を表す
                    ((or (equal? (car terminal-strings) "number")
                         (equal? (car terminal-strings) "integer")
                         (equal? (car terminal-strings) "natural")
                         (equal? (car terminal-strings) "real"))
                     (displayln "\t| \"-\"? ['0'-'9']+ as vl\t{ NUM (int_of_string(vl)) }" fout)
                     (loop (cdr terminal-strings)))
                    ;  文字列
                    ((equal? (car terminal-strings) "string")
                     (display "\t| " fout)
                     (write "\"" fout)
                     (display " [^ '\"']* " fout)
                     (write "\"" fout)
                     (displayln " as lxm\t{ STR (String.sub lxm 1 (String.length lxm - 2)) }" fout)
                     (loop (cdr terminal-strings)))
                    ;  Redexでbooleanを使っていたらtrueとfalseを用意する
                    ((equal? (car terminal-strings) "boolean")
                     (displayln "\t| \"true\"\t{ TRUE }" fout)
                     (displayln "\t| \"false\"\t{ FALSE }" fout)
                     (loop (cdr terminal-strings)))
                    ;  演算子の動作名を指定する
                    ((equal? (car terminal-strings) "+")
                     (displayln "\t| \"+\"\t{ PLUS }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "-")
                     (displayln "\t| \"-\"\t{ MINUS }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "*")
                     (displayln "\t| \"*\"\t{ MULT }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "/")
                     (displayln "\t| \"/\"\t{ DIV }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "<")
                     (displayln "\t| \"<\"\t{ LT }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) ">")
                     (displayln "\t| \">\"\t{ GT }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "<=")
                     (displayln "\t| \"<=\"\t{ LE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) ">=")
                     (displayln "\t| \">=\"\t{ GE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "=")
                     (displayln "\t| \"=\"\t{ EQ }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "==")
                     (displayln "\t| \"==\"\t{ EQEQ }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "!=")
                     (displayln "\t| \"!=\"\t{ NEQ }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "^")
                     (displayln "\t| \"^\"\t{ CARET }" fout)
                     (loop (cdr terminal-strings)))
                    ;  ->,<-の動作名を指定する
                    ((equal? (car terminal-strings) "<-")
                     (displayln "\t| \"<-\"\t{ LARROW }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "->")
                     (displayln "\t| \"->\"\t{ RARROW }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "l-brace")
                     (displayln "\t| \"{\"\t{ LBRACE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "r-brace")
                     (displayln "\t| \"}\"\t{ RBRACE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "l-bracket")
                     (displayln "\t| \"[\"\t{ LBRACKET }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "r-bracket")
                     (displayln "\t| \"]\"\t{ RBRACKET }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "l-pare")
                     (displayln "\t| \"(\"\t{ LPARE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "r-pare")
                     (displayln "\t| \")\"\t{ RPARE }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "dot")
                     (displayln "\t| \".\"\t{ DOT }" fout)
                     (loop (cdr terminal-strings)))
                    ((equal? (car terminal-strings) "semicolon")
                     (displayln "\t| \";\"\t{ SEMICOLON }" fout)
                     (loop (cdr terminal-strings)))
                    ;  動作名に使えない記号（/,!,?）は消す
                    ((car (contain-super-symbols? (car terminal-strings)))
                     (let ((action (string-upcase (last (contain-super-symbols? (car terminal-strings))))))
                       (displayln (string-append "\t| \"" (car terminal-strings) "\"\t{ " action " }") fout)
                       (loop (cdr terminal-strings))))
                    ((equal? (car terminal-strings) "...")
                     (loop (cdr terminal-strings)))
                    (else
                     (displayln (string-append "\t| "
                                               "\"" (car terminal-strings) "\""
                                               "\t{ "
                                               (string-upcase (car terminal-strings))
                                               " }")
                                fout)
                     (loop (cdr terminal-strings)))))))
        (loop terminals)))))

(define main
  (lambda ()
    (let* ((input-file (vector-ref (current-command-line-arguments) 0))
           (output-file (vector-ref (current-command-line-arguments) 1))
           (fin (open-input-file input-file))
           (fout (open-output-file output-file #:exists 'replace))
           (data (read fin)))
      (begin
        (close-input-port fin)
        (make-open-parser fout)
        (newline fout)
        (make-identifier fout)
        (newline fout)
        (make-token (terminal-symbols-of data) fout)
        (close-output-port fout)))))

(main)